// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------ //
// sk6812 //
// ------ //

#define sk6812_wrap_target 0
#define sk6812_wrap 3

#define sk6812_T1 1
#define sk6812_T2 1
#define sk6812_T3 2

static const uint16_t sk6812_program_instructions[] = {
            //     .wrap_target
    0x6121, //  0: out    x, 1            side 0 [1] 
    0x1023, //  1: jmp    !x, 3           side 1     
    0x1000, //  2: jmp    0               side 1     
    0xa042, //  3: nop                    side 0     
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program sk6812_program = {
    .instructions = sk6812_program_instructions,
    .length = 4,
    .origin = -1,
};

static inline pio_sm_config sk6812_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + sk6812_wrap_target, offset + sk6812_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

#include "hardware/clocks.h"
static inline void sk6812Init(PIO pio, uint sm, uint offset, float freq, uint pin) {
    pio_gpio_init(pio, pin);
    pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
    pio_sm_config c = sk6812_program_get_default_config(offset);
    sm_config_set_sideset_pins(&c, pin);
    sm_config_set_out_shift(&c, false, true, 32);
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);
    int cycles_per_bit = sk6812_T1 + sk6812_T2 + sk6812_T3;
    float div = clock_get_hz(clk_sys) / (freq * cycles_per_bit);
    sm_config_set_clkdiv(&c, div);
    pio_sm_init(pio, sm, offset, &c);
    pio_sm_set_enabled(pio, sm, true);
}

#endif

